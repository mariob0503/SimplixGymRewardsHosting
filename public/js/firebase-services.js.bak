// Firebase v9+ services module
import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-app.js";
import { getDatabase, ref, set, get, push, onValue, serverTimestamp } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-database.js";
import { getFirestore, collection, doc, getDoc, setDoc, updateDoc, query, where, limit, getDocs } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore.js";
import { 
  getAuth, 
  GoogleAuthProvider, 
  FacebookAuthProvider, 
  signInWithPopup, 
  onAuthStateChanged, 
  signOut, 
  signInWithRedirect, 
  getRedirectResult, 
  updateProfile, 
  signInWithEmailAndPassword, 
  createUserWithEmailAndPassword, 
  signInAnonymously, 
  signInWithCustomToken
} from "https://www.gstatic.com/firebasejs/9.22.0/firebase-auth.js";
import { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-storage.js";
import { getAnalytics, logEvent } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-analytics.js";
import firebaseConfig from './firebase-config.js';

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const rtdb = getDatabase(app);
const auth = getAuth(app);
const storage = getStorage(app);
let analytics;

// Initialize analytics only in browser environment
try {
  analytics = getAnalytics(app);
} catch (e) {
  console.warn("Analytics initialization failed:", e);
  // Create a dummy analytics object
  analytics = {
    logEvent: () => {}
  };
}

// Auth providers
const googleProvider = new GoogleAuthProvider();
const facebookProvider = new FacebookAuthProvider();

// Configure providers
googleProvider.setCustomParameters({
  prompt: 'select_account'
});

// Display service authentication function
export async function authenticateDisplayService(displayId) {
  console.log("Authenticating display service for:", displayId);
  
  // Modify displayId to add prefix if not already present
  if (!displayId.startsWith('display_')) {
    displayId = 'display_' + displayId;
  }
  
  try {
    // Check if already authenticated
    if (auth.currentUser) {
      console.log("Already authenticated as:", auth.currentUser.uid);
      return auth.currentUser;
    }
    
    // Try anonymous authentication - this is the simplest approach
    console.log("Attempting anonymous authentication...");
    try {
      const anonymousUser = await signInAnonymously(auth);
      console.log("Anonymous auth successful:", anonymousUser.user.uid);
      
      // Try to create or update the display record in Firestore
      try {
        const displayRef = doc(db, 'displays', displayId);
        await setDoc(displayRef, {
          lastSeen: new Date().toISOString(),
          status: 'online',
          type: 'display'
        }, { merge: true });
        console.log("Display record updated in Firestore");
      } catch (firestoreError) {
        console.warn("Could not update display record in Firestore:", firestoreError);
        // Continue anyway - this is not critical
      }
      
      return anonymousUser.user;
    } catch (anonError) {
      console.error("Anonymous authentication failed:", anonError);
      
      // Try email/password as fallback
      try {
        const email = `display-${displayId}@simplix-display.local`;
        const password = `Display-${displayId}-${window.location.hostname.replace(/[^a-zA-Z0-9]/g, '')}`;
        
        console.log("Attempting email/password authentication with:", email);
        
        try {
          // Try to sign in
          const userCred = await signInWithEmailAndPassword(auth, email, password);
          console.log("Email/password authentication successful");
          return userCred.user;
        } catch (signInError) {
          // If account doesn't exist, create it
          if (signInError.code === 'auth/user-not-found') {
            console.log("Display account not found, creating new account");
            const newUserCred = await createUserWithEmailAndPassword(auth, email, password);
            
            try {
              await updateProfile(newUserCred.user, {
                displayName: `Display_${displayId}`
              });
            } catch (profileError) {
              console.warn("Could not update user profile:", profileError);
            }
            
            console.log("New display account created successfully");
            return newUserCred.user;
          } else {
            throw signInError;
          }
        }
      } catch (emailAuthError) {
        console.error("Email/password authentication failed:", emailAuthError);
        throw emailAuthError;
      }
    }
  } catch (error) {
    console.error("All authentication methods failed:", error);
    throw new Error(`Failed to authenticate display: ${error.message}`);
  }
}

// Export all services and methods
export {
  app,
  db,
  rtdb,
  auth,
  storage,
  analytics,
  
  // Firestore exports
  collection,
  doc,
  getDoc,
  setDoc,
  updateDoc,
  query,
  where,
  limit,
  getDocs,
  
  // RTDB exports
  ref,
  set,
  get,
  push,
  onValue,
  serverTimestamp,
  
  // Auth exports
  googleProvider,
  facebookProvider,
  signInWithPopup,
  onAuthStateChanged,
  signOut,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  signInAnonymously,
  signInWithCustomToken,
  
  // Storage exports
  storageRef,
  uploadBytes,
  getDownloadURL,
  
  // Analytics exports
  logEvent
};

// Make the function available globally for direct access
if (typeof window !== 'undefined') {
  window.firebaseAuthenticateDisplay = authenticateDisplayService;
}

// Helper functions
export async function signInWithGoogle() {
  console.log("Starting Google sign-in process");
  try {
    // Create a new provider instance to ensure fresh state
    const provider = new GoogleAuthProvider();
    
    // Add scopes to request
    provider.addScope('profile');
    provider.addScope('email');
    
    // Set custom parameters to ensure proper authentication flow
    provider.setCustomParameters({
      // Force account selection even if user is already signed in
      prompt: 'select_account'
    });
    
    // Log important information for debugging
    console.log("Current hostname:", window.location.hostname);
    console.log("Auth domain being used:", auth.app.options.authDomain);
    console.log("Redirect URL:", window.location.href);
    
    try {
      // Try popup method first, as it's more user-friendly
      console.log("Attempting popup sign-in method");
      const result = await signInWithPopup(auth, provider);
      console.log("Popup sign-in successful:", result.user.email);
      return result.user;
    } catch (popupError) {
      console.warn("Popup sign-in failed, falling back to redirect method:", popupError.message);
      
      // Fall back to redirect method if popup fails
      // This is more reliable but requires a page reload
      console.log("Using redirect sign-in method as fallback");
      await signInWithRedirect(auth, provider);
      return null; // Page will redirect
    }
  } catch (error) {
    console.error("Google sign-in error:", error);
    throw error;
  }
}

// Add this function to handle redirect results
export async function checkRedirectResult() {
  try {
    console.log("Checking for redirect result");
    
    // Log authentication state
    const currentUser = auth.currentUser;
    console.log("Current auth state:", currentUser ? 
      `Logged in as ${currentUser.email}` : "Not logged in");
    
    // Try to get redirect result
    console.log("Calling getRedirectResult...");
    const result = await getRedirectResult(auth);
    
    // Check the result
    if (result) {
      // Log success information
      console.log("Redirect sign-in successful!");
      console.log("User:", result.user.email);
      console.log("Provider ID:", result.providerId);
      
      try {
        // Log analytics event if possible
        logEvent(analytics, 'login', { 
          method: 'google_redirect',
          success: true
        });
      } catch (analyticsError) {
        console.warn("Analytics event logging failed:", analyticsError);
      }
      
      // Create or update user profile
      try {
        console.log("Creating/updating user profile after redirect sign-in");
        const userProfile = await ensureUserProfile(result.user);
        console.log("Profile setup successful:", userProfile ? "Profile data retrieved" : "No profile data");
        return result.user;
      } catch (profileError) {
        // Create a detailed error message
        const errorDetails = `Profile setup error: ${profileError.code || 'unknown'} - ${profileError.message}`;
        console.error(errorDetails, profileError);
        
        // Store error details in sessionStorage for displaying to user
        sessionStorage.setItem('authError', JSON.stringify({
          type: 'profile_setup',
          message: errorDetails,
          timestamp: new Date().toISOString(),
          userId: result.user.uid
        }));
        
        // Also add a fallback alert for the user
        if (window.alert) {
          window.alert(`Failed to set up your profile: ${profileError.message}. Please try again or contact support if the problem persists.`);
        }
        
        throw new Error(errorDetails);
      }
    } else {
      console.log("No redirect result found");
      return null;
    }
  } catch (error) {
    console.error("Error getting redirect result:", error);
    
    // Log error details
    console.error("Error code:", error.code || 'unknown');
    console.error("Error message:", error.message);
    
    // Store error details in sessionStorage for displaying to user
    sessionStorage.setItem('authError', JSON.stringify({
      type: 'redirect_result',
      message: `Authentication error: ${error.code || 'unknown'} - ${error.message}`,
      timestamp: new Date().toISOString()
    }));
    
    throw error;
  }
}

export async function signInWithFacebook() {
  console.log("signInWithFacebook called");
  try {
    const result = await signInWithPopup(auth, facebookProvider);
    
    try {
      logEvent(analytics, 'login', { method: 'facebook' });
    } catch (e) {
      console.warn("Failed to log analytics event:", e);
    }
    
    return result.user;
  } catch (error) {
    console.error("Facebook sign-in error:", error);
    throw error;
  }
}

export async function getUserProfile(userId) {
  console.log("getUserProfile called for:", userId);
  try {
    const userDoc = await getDoc(doc(db, 'users', userId));
    return userDoc.exists() ? userDoc.data() : null;
  } catch (error) {
    console.error("Error getting user profile:", error);
    throw error;
  }
}

export async function updateUserProfile(userId, profileData) {
  console.log("updateUserProfile called for:", userId, profileData);
  try {
    if (!userId) {
      throw new Error("No user ID provided");
    }
    
    // Check if profile exists first
    const userDocRef = doc(db, 'users', userId);
    const userDocSnap = await getDoc(userDocRef);
    
    if (userDocSnap.exists()) {
      // Only update allowed fields
      const allowedFields = ['name', 'gymId', 'lastUpdated', 'email', 'group1'];
      const updateData = {};
      
      for (const field of allowedFields) {
        if (field in profileData) {
          updateData[field] = profileData[field];
        }
      }
      
      // Always add lastUpdated
      updateData.lastUpdated = new Date().toISOString();
      
      // Ensure email is included if it exists in the original document
      // This is critical for Firestore security rules
      if (!updateData.email && userDocSnap.data().email) {
        updateData.email = userDocSnap.data().email;
      }
      
      // If email is still missing, try to get it from auth
      if (!updateData.email) {
        try {
          const currentUser = auth.currentUser;
          if (currentUser && currentUser.email) {
            updateData.email = currentUser.email;
            console.log("Using email from auth:", updateData.email);
          }
        } catch (e) {
          console.error("Error getting email from auth:", e);
        }
      }
      
      // If email is still missing, use a placeholder (not ideal but prevents rule violation)
      if (!updateData.email) {
        updateData.email = userId + "@placeholder.com";
        console.log("Using placeholder email:", updateData.email);
      }
      
      // Log the update data for debugging
      console.log("Updating profile with data:", updateData);
      
      // Update the document
      await updateDoc(userDocRef, updateData);
      console.log("Profile updated successfully");
      return true;
    } else {
      // Create new profile
      const newProfile = {
        ...profileData,
        created: new Date().toISOString(),
        lastUpdated: new Date().toISOString(),
        points: 0
      };
      
      // Ensure email is included
      if (!newProfile.email) {
        try {
          const currentUser = auth.currentUser;
          if (currentUser && currentUser.email) {
            newProfile.email = currentUser.email;
          } else {
            newProfile.email = userId + "@placeholder.com";
          }
        } catch (e) {
          newProfile.email = userId + "@placeholder.com";
        }
      }
      
      console.log("Creating new profile with data:", newProfile);
      
      await setDoc(userDocRef, newProfile);
      console.log("New profile created successfully");
      return true;
    }
  } catch (error) {
    console.error("Error updating user profile:", error);
    throw error;
  }
}

export async function createUserProfile(userId, profileData) {
  console.log("createUserProfile called for:", userId);
  try {
    // Validate userId
    if (!userId) {
      const errorMsg = "Missing user ID for profile creation";
      console.error(errorMsg);
      throw new Error(errorMsg);
    }
    
    // Validate required profile data
    if (!profileData.email) {
      const errorMsg = "Missing email in profile data";
      console.error(errorMsg);
      throw new Error(errorMsg);
    }
    
    // If name is missing, generate a default one from email
    if (!profileData.name) {
      profileData.name = profileData.email.split('@')[0] || `User_${userId.substring(0, 5)}`;
      console.log("Generated name for user:", profileData.name);
    }
    
    // If gymId is missing, set a default value
    if (!profileData.gymId) {
      profileData.gymId = 'default';
      console.log("Setting default gymId for user profile");
    }
    
    // Create complete profile object with defaults
    const completeProfile = {
      ...profileData,
      created: new Date().toISOString(),
      lastUpdated: new Date().toISOString(),
      points: 0,
      'shop-points': 0,
      'total-points': 0,
      'number-played': 0,
      'loyalty-tier': 'Bronze'
    };
    
    console.log("Creating user profile with data:", completeProfile);
    
    try {
      await setDoc(doc(db, 'users', userId), completeProfile);
      console.log("User profile created successfully");
      return true;
    } catch (docError) {
      // Create a detailed error message for document writing
      const errorMsg = `Document creation failed: ${docError.code || 'unknown'} - ${docError.message}`;
      console.error(errorMsg, docError);
      throw new Error(errorMsg);
    }
  } catch (error) {
    const errorMsg = `Error creating user profile: ${error.code || 'unknown'} - ${error.message}`;
    console.error(errorMsg, error);
    throw error;
  }
}

export async function checkUsernameAvailability(username) {
  console.log("checkUsernameAvailability called for:", username);
  try {
    const q = query(
      collection(db, 'users'),
      where('name', '==', username),
      limit(1)
    );
    const querySnapshot = await getDocs(q);
    return querySnapshot.empty;
  } catch (error) {
    console.error("Error checking username:", error);
    throw error;
  }
}

export async function setDisplayContent(displayId, content) {
  console.log("setDisplayContent called for:", displayId);
  try {
    // Make sure displayId has the correct format
    if (!displayId.startsWith('display_')) {
      displayId = 'display_' + displayId;
    }
    
    await set(ref(rtdb, `displays/${displayId}`), {
      content: content,
      lastUpdated: serverTimestamp()
    });
    return true;
  } catch (error) {
    console.error("Error setting display content:", error);
    throw error;
  }
}

// Function to set content without authentication for direct access
export async function setDisplayContentDirect(displayId, content) {
  console.log("Setting display content directly (no auth) for:", displayId);
  try {
    // Make sure displayId has the correct format
    if (!displayId.startsWith('display_')) {
      displayId = 'display_' + displayId;
    }
    
    // Create database reference and set the content
    const displayRef = ref(rtdb, `displays/${displayId}`);
    await set(displayRef, {
      content: content,
      lastUpdated: serverTimestamp(),
      directAccess: true
    });
    console.log("Display content set successfully via direct access");
    return true;
  } catch (error) {
    console.error("Error setting display content via direct access:", error);
    throw error;
  }
}

export async function getUserPoints(userId) {
  console.log("getUserPoints called for:", userId);
  try {
    if (!userId) {
      console.error("No user ID provided to getUserPoints");
      return 0;
    }
    
    // Make sure we're using the correct imports
    const userDoc = await getDoc(doc(db, 'users', userId));
    
    if (userDoc.exists()) {
      const userData = userDoc.data();
      console.log("User data retrieved:", userData);
      return userData.points || 0;
    } else {
      console.log("No user document found for ID:", userId);
      return 0;
    }
  } catch (error) {
    console.error("Error getting user points:", error);
    // Return 0 instead of undefined to avoid further errors
    return 0;
  }
}

export async function ensureUserProfile(user) {
  console.log("Ensuring user profile exists for:", user.displayName || user.email);
  
  if (!user || !user.uid) {
    const errorMsg = "Invalid user object: Missing user ID";
    console.error(errorMsg);
    throw new Error(errorMsg);
  }
  
  try {
    // Check if profile exists
    const userDocRef = doc(db, 'users', user.uid);
    const userDocSnap = await getDoc(userDocRef);
    
    if (userDocSnap.exists()) {
      console.log("User profile exists");
      const profileData = userDocSnap.data();
      
      // Check if profile has all required fields
      if (!profileData.gymId || profileData.gymId === 'default') {
        console.log("Profile exists but needs gym update");
        // Try to get gym from localStorage
        const storedGym = localStorage.getItem('selectedGym');
        if (storedGym) {
          console.log("Found stored gym:", storedGym);
          await updateDoc(userDocRef, {
            gymId: storedGym,
            lastUpdated: new Date().toISOString()
          });
          profileData.gymId = storedGym;
        }
      }
      
      return profileData;
    } else {
      console.log("Creating new user profile");
      
      // Try to get gym from localStorage
      const storedGym = localStorage.getItem('selectedGym');
      
      // Create basic profile
      const newProfile = {
        name: user.displayName || '',
        email: user.email || '',
        gymId: storedGym || 'BFit24 Henstedt-Ulzburg', // Use stored gym or default to Henstedt-Ulzburg
        created: new Date().toISOString(),
        lastUpdated: new Date().toISOString(),
        points: 0,
        'shop-points': 0,
        'total-points': 0,
        'number-played': 0,
        'loyalty-tier': 'Bronze'
      };
      
      // Validate required fields
      if (!newProfile.email) {
        const errorMsg = "Profile creation failed: Missing email address";
        console.error(errorMsg);
        throw new Error(errorMsg);
      }
      
      if (!newProfile.name) {
        // Generate a name if missing
        newProfile.name = newProfile.email.split('@')[0] || 'User_' + user.uid.substring(0, 5);
        console.log("Generated name for user:", newProfile.name);
      }
      
      try {
        // Create the profile
        console.log("Setting document with profile:", newProfile);
        await setDoc(userDocRef, newProfile);
        console.log("Profile created successfully");
        return newProfile;
      } catch (writeError) {
        console.error("Error writing profile:", writeError);
        // Add more context to the error
        throw new Error(`Profile creation failed: ${writeError.message} (code: ${writeError.code || 'unknown'})`);
      }
    }
  } catch (error) {
    console.error("Error in ensureUserProfile:", error);
    // Check for specific error conditions
    if (error.code === 'unavailable') {
      throw new Error('Failed to access the database. Please check your internet connection and try again.');
    } else if (error.code === 'permission-denied') {
      throw new Error('Access denied. Please make sure you have selected a valid gym location.');
    } else {
      throw error;
    }
  }
}
